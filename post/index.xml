<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kcfuler Blog</title>
    <link>https://kcfuler.github.io/post/</link>
    <description>Recent content in Posts on Kcfuler Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kcfuler.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue的渲染器</title>
      <link>https://kcfuler.github.io/2023/02/23/vuejs-renderer/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/23/vuejs-renderer/</guid>
      <description>渲染器设计 渲染器与响应式系统 响应式系统为渲染器提供数据， 也就是当数据发生变化时，为渲染器提供新的数据供其渲染。 渲染器将响应式系统的数据渲染到</description>
    </item>
    
    <item>
      <title>Vue中的响应式系统</title>
      <link>https://kcfuler.github.io/2023/02/23/vuejs-reactivity/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/23/vuejs-reactivity/</guid>
      <description>响应式系统 分支切换 问题： 在副作用函数中执行三元表达式时，会访问到表达式中的两个数据，但是最后访问到的数据只是表达式的结果， 这样就造成了不必要</description>
    </item>
    
    <item>
      <title>Welcome to kcfuler Blog</title>
      <link>https://kcfuler.github.io/2023/02/01/hello-world/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/01/hello-world/</guid>
      <description>hellow world 欢迎来到我的博客! content aosdhgvoadnoa;dfbhnvao;ergnowE;JWOEJFOAEFVNHO;ASDFBNVAEO SADNVOK;ADNVAWDFJ ADVBNAO;DFBVNAOEDSVJ APDVBN AOFBADO&amp;rsquo;VNASODFJV ADFBNVA&amp;rsquo; ODVNOD&amp;rsquo;FNVAO&amp;rsquo;DFVN</description>
    </item>
    
    <item>
      <title>基础算法模板</title>
      <link>https://kcfuler.github.io/2023/02/01/basic-algorithm/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/01/basic-algorithm/</guid>
      <description>基础算法 排序 快排 #include &amp;lt;iostream&amp;gt; using namespace std; const int N = 1e6 + 10; int a[N]; void quick_sort(int a[] , int l , int r){ if( l &amp;gt;= r) return ; int x = a[(r+l)/2] , i = l - 1 , j = r + 1; while( i &amp;lt; j ){ do i ++ ; while( x &amp;gt; a[i]); do j -- ;</description>
    </item>
    
  </channel>
</rss>
