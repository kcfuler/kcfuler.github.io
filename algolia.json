[{"author":null,"categories":["tech"],"content":"vue服务端渲染与实现方案","date":1677369600,"description":"vue服务端渲染与实现方案","dir":"post\\","excerpt_html":"vue服务端渲染与实现方案","excerpt_text":"vue服务端渲染与实现方案","expirydate":-62135596800,"fuzzywordcount":2000,"html":"vue服务端渲染与实现方案","keywords":null,"kind":"page","lang":"en","lastmod":1677369600,"objectID":"f11dfba260d227e595f1cc77a769cf73","permalink":"https://kcfuler.github.io/2023/02/26/vuejs-ssr/","publishdate":"2023-02-26T00:00:00Z","readingtime":4,"relpermalink":"/2023/02/26/vuejs-ssr/","section":"post","summary":"CSR \u0026amp; SSR 同构 实际上，同构渲染中的首次渲染与 SSR 的工作流程是一致的。也就是说，当首次访问或者刷新页面时，整个页面的内容是在服务端完成渲染的，浏览器","tags":["vue"],"title":"Vue的服务端渲染","type":"post","url":"/2023/02/26/vuejs-ssr/","weight":0,"wordcount":1994},{"author":null,"categories":["tech"],"content":"vue编译器原理与实现方案","date":1677369600,"description":"vue编译器原理与实现方案","dir":"post\\","excerpt_html":"vue编译器原理与实现方案","excerpt_text":"vue编译器原理与实现方案","expirydate":-62135596800,"fuzzywordcount":5200,"html":"vue编译器原理与实现方案","keywords":null,"kind":"page","lang":"en","lastmod":1677369600,"objectID":"fe1538e6b72737d7ad5708e716af14f1","permalink":"https://kcfuler.github.io/2023/02/26/vuejs-compiler/","publishdate":"2023-02-26T00:00:00Z","readingtime":11,"relpermalink":"/2023/02/26/vuejs-compiler/","section":"post","summary":"编译器核心技术概览 模板DSL的编辑器 编译器其实只是一段程序，它用来将“一种语言 A”翻译成“另外一种语言 B”。其中，语言 A 通常叫作源代码（so","tags":["vue"],"title":"Vue的编译器","type":"post","url":"/2023/02/26/vuejs-compiler/","weight":0,"wordcount":5168},{"author":null,"categories":["tech"],"content":"vue组件化实现方案","date":1677283200,"description":"vue组件化实现方案","dir":"post\\","excerpt_html":"vue组件化实现方案","excerpt_text":"vue组件化实现方案","expirydate":-62135596800,"fuzzywordcount":5600,"html":"vue组件化实现方案","keywords":null,"kind":"page","lang":"en","lastmod":1677283200,"objectID":"691184ed23063a5752bf63bca38b246b","permalink":"https://kcfuler.github.io/2023/02/25/vuejs-component/","publishdate":"2023-02-25T00:00:00Z","readingtime":12,"relpermalink":"/2023/02/25/vuejs-component/","section":"post","summary":"组件的实现原理 组件渲染 定义组件 01 // MyComponent 是一个组件，它的值是一个选项对象 02 const MyComponent = { 03 name: \u0026#39;MyComponent\u0026#39;, 04 data() { 05 return { foo: 1 } 06 } 07 } 渲染组件 01 function patch(n1, n2, container, anchor) { 02 if (n1 \u0026amp;\u0026amp;","tags":["vue"],"title":"Vue的组件化","type":"post","url":"/2023/02/25/vuejs-component/","weight":0,"wordcount":5569},{"author":null,"categories":["tech"],"content":"vue渲染器实现方案","date":1677196800,"description":"vue渲染器实现方案","dir":"post\\","excerpt_html":"vue渲染器实现方案","excerpt_text":"vue渲染器实现方案","expirydate":-62135596800,"fuzzywordcount":4600,"html":"vue渲染器实现方案","keywords":null,"kind":"page","lang":"en","lastmod":1677196800,"objectID":"a12f5700ce4d2e17df2697d3c93effdb","permalink":"https://kcfuler.github.io/2023/02/23/vuejs-renderer/","publishdate":"2023-02-24T00:00:00Z","readingtime":10,"relpermalink":"/2023/02/23/vuejs-renderer/","section":"post","summary":"渲染器设计 渲染器与响应式系统 响应式系统为渲染器提供数据， 也就是当数据发生变化时，为渲染器提供新的数据供其渲染。 渲染器将响应式系统的数据渲染到","tags":["vue"],"title":"Vue的渲染器","type":"post","url":"/2023/02/23/vuejs-renderer/","weight":0,"wordcount":4584},{"author":null,"categories":["tech"],"content":"vue响应式系统中的实现和一些方案的总结","date":1677110400,"description":"vue响应式系统中的实现和一些方案的总结","dir":"post\\","excerpt_html":"vue响应式系统中的实现和一些方案的总结","excerpt_text":"vue响应式系统中的实现和一些方案的总结","expirydate":-62135596800,"fuzzywordcount":3500,"html":"vue响应式系统中的实现和一些方案的总结","keywords":null,"kind":"page","lang":"en","lastmod":1677110400,"objectID":"a15db50bfb66547acc75860b463459a5","permalink":"https://kcfuler.github.io/2023/02/23/vuejs-reactivity/","publishdate":"2023-02-23T00:00:00Z","readingtime":7,"relpermalink":"/2023/02/23/vuejs-reactivity/","section":"post","summary":"响应式系统 分支切换 问题： 在副作用函数中执行三元表达式时，会访问到表达式中的两个数据，但是最后访问到的数据只是表达式的结果， 这样就造成了不必要","tags":["vue"],"title":"Vue中的响应式系统","type":"post","url":"/2023/02/23/vuejs-reactivity/","weight":0,"wordcount":3411},{"author":null,"categories":["Life"],"content":"hahha","date":1675209600,"description":"hahha","dir":"post\\","excerpt_html":"hahha","excerpt_text":"hahha","expirydate":-62135596800,"fuzzywordcount":100,"html":"hahha","keywords":null,"kind":"page","lang":"en","lastmod":1675209600,"objectID":"8fee2a20f66da4e0a75b0302025d1fb7","permalink":"https://kcfuler.github.io/2023/02/01/hello-world/","publishdate":"2023-02-01T00:00:00Z","readingtime":1,"relpermalink":"/2023/02/01/hello-world/","section":"post","summary":"hellow world 欢迎来到我的博客! content aosdhgvoadnoa;dfbhnvao;ergnowE;JWOEJFOAEFVNHO;ASDFBNVAEO SADNVOK;ADNVAWDFJ ADVBNAO;DFBVNAOEDSVJ APDVBN AOFBADO\u0026rsquo;VNASODFJV ADFBNVA\u0026rsquo; ODVNOD\u0026rsquo;FNVAO\u0026rsquo;DFVN","tags":["hello"],"title":"Welcome to kcfuler Blog","type":"post","url":"/2023/02/01/hello-world/","weight":0,"wordcount":19},{"author":null,"categories":["tech"],"content":"学习自acwing基础课","date":1675209600,"description":"学习自acwing基础课","dir":"post\\","excerpt_html":"学习自acwing基础课","excerpt_text":"学习自acwing基础课","expirydate":-62135596800,"fuzzywordcount":20000,"html":"学习自acwing基础课","keywords":null,"kind":"page","lang":"en","lastmod":1675209600,"objectID":"7aacec33de4d32d03b328b66d407430a","permalink":"https://kcfuler.github.io/2023/02/01/basic-algorithm/","publishdate":"2023-02-01T00:00:00Z","readingtime":40,"relpermalink":"/2023/02/01/basic-algorithm/","section":"post","summary":"基础算法 排序 快排 #include \u0026lt;iostream\u0026gt; using namespace std; const int N = 1e6 + 10; int a[N]; void quick_sort(int a[] , int l , int r){ if( l \u0026gt;= r) return ; int x = a[(r+l)/2] , i = l - 1 , j = r + 1; while( i \u0026lt; j ){ do i ++ ; while( x \u0026gt; a[i]); do j -- ;","tags":["cs"],"title":"基础算法模板","type":"post","url":"/2023/02/01/basic-algorithm/","weight":0,"wordcount":19912},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://kcfuler.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me kcfuler is a passionate frontend developer .\nstack common data structure and algorithm vue react node ","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":18},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://kcfuler.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive\\","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://kcfuler.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]