<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Kcfuler Blog</title>
    <link>https://kcfuler.github.io/categories/tech/</link>
    <description>Recent content in tech on Kcfuler Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kcfuler.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue的服务端渲染</title>
      <link>https://kcfuler.github.io/2023/02/26/vuejs-ssr/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/26/vuejs-ssr/</guid>
      <description>CSR &amp;amp; SSR 同构 实际上，同构渲染中的首次渲染与 SSR 的工作流程是一致的。也就是说，当首次访问或者刷新页面时，整个页面的内容是在服务端完成渲染的，浏览器</description>
    </item>
    
    <item>
      <title>Vue的编译器</title>
      <link>https://kcfuler.github.io/2023/02/26/vuejs-compiler/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/26/vuejs-compiler/</guid>
      <description>编译器核心技术概览 模板DSL的编辑器 编译器其实只是一段程序，它用来将“一种语言 A”翻译成“另外一种语言 B”。其中，语言 A 通常叫作源代码（so</description>
    </item>
    
    <item>
      <title>Vue的组件化</title>
      <link>https://kcfuler.github.io/2023/02/25/vuejs-component/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/25/vuejs-component/</guid>
      <description>组件的实现原理 组件渲染 定义组件 01 // MyComponent 是一个组件，它的值是一个选项对象 02 const MyComponent = { 03 name: &amp;#39;MyComponent&amp;#39;, 04 data() { 05 return { foo: 1 } 06 } 07 } 渲染组件 01 function patch(n1, n2, container, anchor) { 02 if (n1 &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>Vue的渲染器</title>
      <link>https://kcfuler.github.io/2023/02/23/vuejs-renderer/</link>
      <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/23/vuejs-renderer/</guid>
      <description>渲染器设计 渲染器与响应式系统 响应式系统为渲染器提供数据， 也就是当数据发生变化时，为渲染器提供新的数据供其渲染。 渲染器将响应式系统的数据渲染到</description>
    </item>
    
    <item>
      <title>Vue中的响应式系统</title>
      <link>https://kcfuler.github.io/2023/02/23/vuejs-reactivity/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/23/vuejs-reactivity/</guid>
      <description>响应式系统 分支切换 问题： 在副作用函数中执行三元表达式时，会访问到表达式中的两个数据，但是最后访问到的数据只是表达式的结果， 这样就造成了不必要</description>
    </item>
    
    <item>
      <title>基础算法模板</title>
      <link>https://kcfuler.github.io/2023/02/01/basic-algorithm/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kcfuler.github.io/2023/02/01/basic-algorithm/</guid>
      <description>基础算法 排序 快排 #include &amp;lt;iostream&amp;gt; using namespace std; const int N = 1e6 + 10; int a[N]; void quick_sort(int a[] , int l , int r){ if( l &amp;gt;= r) return ; int x = a[(r+l)/2] , i = l - 1 , j = r + 1; while( i &amp;lt; j ){ do i ++ ; while( x &amp;gt; a[i]); do j -- ;</description>
    </item>
    
  </channel>
</rss>
